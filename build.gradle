buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:2.1.4.RELEASE")
    }
}

plugins {
  id "java"
  id 'net.nemerosa.versioning' version '2.0.0'
}

apply plugin: 'org.springframework.boot'

// docker run -p 8080:8080 -d sogis/oereb-web-service
// docker run -p 8080:8080 -e DBURL=jdbc:postgresql://docker.for.win.localhost/ceis -e DBSCHEMA=oereb -e DBUSR=usr -e DBPWD=pwd  sogis/oereb-web-service
// docker run -it --rm alpine ping 172.17.0.2

//def DOCKER_ACCOUNT = System.getProperty('DOCKER_ACCOUNT','sogis')
//def DOCKER_REPO = System.getProperty('DOCKER_REPO','oereb-web-service')

repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
    maven {
        url "http://jars.umleditor.org"
    }
    maven {
        url "http://jars.interlis.ch"
    }
}

configurations.all {
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

dependencies {
    compile group: 'ch.ehi.oereb', name: 'oereb-web-service', version: "2.0.0", changing: true
    compile("org.springframework.boot:spring-boot-starter-actuator:2.1.4.RELEASE")
}


jar {
  manifest {
    attributes(
      "Main-Class": "ch.ehi.oereb.webservice.Application",
      "Class-Path": configurations.runtimeClasspath.collect { 'libs/'+it.getName() }.join(' '))
  }
}


task jardist(type: Copy) {
    delete fileTree('build/dist')
    destinationDir = file('build/dist')
    from jar
    dependsOn configurations.runtimeClasspath
    into('libs'){
        from {
            configurations.runtimeClasspath
        }
    }    
}

// Docker image wird in/mit GH Action Pipeline erstellt (v.a. wegen ARM64)
/*
task buildImage(dependsOn: jardist){
    doLast { task ->
            // https://github.com/nemerosa/versioning
            println versioning.info.full
            def buildident = "2.0." + (System.getenv("GITHUB_RUN_NUMBER") ?: "localbuild")
            def githash=versioning.info.commit
            def build_timestamp=getTimestamp()
            exec {
                commandLine 'docker', 'build',
                '--no-cache', '--force-rm',
                '-t', "${DOCKER_ACCOUNT}/${DOCKER_REPO}:${buildident}",
                '-t', "${DOCKER_ACCOUNT}/${DOCKER_REPO}:latest",
                '--label', "${DOCKER_REPO}.created=${build_timestamp}", 
                '--label', "${DOCKER_REPO}.git_commit=${githash}",
                '--label', "${DOCKER_REPO}.gh_action_build=${buildident}",
                '-f', 'Dockerfile.alpine',  '.'
            }
        }
    }
def getTimestamp() {
    def date = new Date()
    return date.format('yyyy-MM-dd HH:mm:ss')
}
*/

